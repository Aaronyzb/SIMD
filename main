#include <cstring>
#include <string>
#include <iostream>
#include <fstream>
#include <chrono>
#include <iomanip>
#include <sys/time.h>
#include "main.h"
#include <algorithm>
#include <arm_neon.h>
#include<cstring>
#include <omp.h>
// 可以自行添加需要的头文件

void fRead(int *a, int *b, int *n, int *p, int input_id){
    // 数据输入函数
    std::string str1 = "/nttdata/";
    std::string str2 = std::to_string(input_id);
    std::string strin = str1 + str2 + ".in";
    char data_path[strin.size() + 1];
    std::copy(strin.begin(), strin.end(), data_path);
    data_path[strin.size()] = '\0';
    std::ifstream fin;
    fin.open(data_path, std::ios::in);
    fin>>*n>>*p;
    for (int i = 0; i < *n; i++){
        fin>>a[i];
    }
    for (int i = 0; i < *n; i++){   
        fin>>b[i];
    }
}

void fCheck(int *ab, int n, int input_id){
    // 判断多项式乘法结果是否正确
    std::string str1 = "/nttdata/";
    std::string str2 = std::to_string(input_id);
    std::string strout = str1 + str2 + ".out";
    char data_path[strout.size() + 1];
    std::copy(strout.begin(), strout.end(), data_path);
    data_path[strout.size()] = '\0';
    std::ifstream fin;
    fin.open(data_path, std::ios::in);
    for (int i = 0; i < n * 2 - 1; i++){
        int x;
        fin>>x;
        if(x != ab[i]){
            std::cout<<"多项式乘法结果错误"<<std::endl;
            return;
        }
    }
    std::cout<<"多项式乘法结果正确"<<std::endl;
    return;
}

void fWrite(int *ab, int n, int input_id){
    // 数据输出函数, 可以用来输出最终结果, 也可用于调试时输出中间数组
    std::string str1 = "files/";
    std::string str2 = std::to_string(input_id);
    std::string strout = str1 + str2 + ".out";
    char output_path[strout.size() + 1];
    std::copy(strout.begin(), strout.end(), output_path);
    output_path[strout.size()] = '\0';
    std::ofstream fout;
    fout.open(output_path, std::ios::out);
    for (int i = 0; i < n * 2 - 1; i++){
        fout<<ab[i]<<'\n';
    }
}

#include <algorithm>

void poly_multiply(int *a, int *b, int *ab, int n, int p) {
    typedef unsigned long long u64;
    typedef __uint128_t u128;

    auto mod_exp = [](u64 base, u64 exp, u64 mod) -> u64 {
        u64 res = 1;
        while (exp) {
            if (exp & 1) res = (u128)res * base % mod;
            base = (u128)base * base % mod;
            exp >>= 1;
        }
        return res;
    };

    auto montgomery_init = [&](u64 mod, u64 &inv, u64 &r2) {
        u64 t = 1, m = mod;
        for (int i = 0; i < 6; ++i) t *= 2 - m * t;
        inv = -t;
        r2 = -u128(mod) % mod;
    };

    auto montgomery_reduce = [&](u128 t, u64 mod, u64 inv) -> u64 {
        u64 m = t * inv;
        u128 t2 = t + u128(m) * mod;
        return t2 >> 64;
    };

    auto montgomery_mul = [&](u64 a, u64 b, u64 mod, u64 inv) -> u64 {
        return montgomery_reduce(u128(a) * b, mod, inv);
    };

    auto to_mont = [&](u64 x, u64 mod, u64 r2, u64 inv) -> u64 {
        return montgomery_reduce(u128(x) * r2, mod, inv);
    };

    auto from_mont = [&](u64 x, u64 mod, u64 inv) -> u64 {
        return montgomery_reduce(x, mod, inv);
    };

    auto montgomery_add = [](u64 a, u64 b, u64 mod) -> u64 {
        u64 res = a + b;
        if (res >= mod) {
            res -= mod;
        }
        return res;
    };
    auto montgomery_sub = [](u64 a, u64 b, u64 mod) -> u64 {
        if (a >= b) {
            return a - b;
        } else {
            return mod - (b - a);
        }
    };
    
    // 初始化 Montgomery 参数
    u64 mod = p, inv, r2;
    montgomery_init(mod, inv, r2);

    u64 len = 1;
    while (len < 2 * n) len <<= 1;

    u64 *A = new u64[len]();
    u64 *B = new u64[len]();

    for (int i = 0; i < n; ++i) {
        A[i] = to_mont(a[i], mod, r2, inv);
        B[i] = to_mont(b[i], mod, r2, inv);
    }

    u64 g = 3;
    u64 root = mod_exp(g, (mod - 1) / len, mod);
    u64 root_inv = mod_exp(root, mod - 2, mod);
    u64 len_inv = mod_exp(len, mod - 2, mod);
    u64 root_mont = to_mont(root, mod, r2, inv);
    u64 root_inv_mont = to_mont(root_inv, mod, r2, inv);
    u64 len_inv_mont = to_mont(len_inv, mod, r2, inv);

    // 自定义 Neon 向量化 Montgomery 运算
    inline uint64x2_t montgomery_mul_vectorized_neon(uint64x2_t a, uint64x2_t b, u64 mod, u64 inv) {
        uint64x2_t t = vmulq_u64(a, b); 
        uint64x2_t u = vmulq_u64(t, vdupq_n_u64(inv)); 
        u = vandq_u64(u, vdupq_n_u64((1ULL << 32) - 1)); 
        t = vmlaq_u64(t, u, vdupq_n_u64(mod)); 
        t = vshrq_n_u64(t, 32); 
        return t;
    }
    
    inline uint64x2_t montgomery_add_vectorized_neon(uint64x2_t a, uint64x2_t b, u64 mod) {
        uint64x2_t sum = vaddq_u64(a, b); 
        uint64x2_t mask = vcgtq_u64(sum, vdupq_n_u64(mod)); 
        return vsubq_u64(sum, vandq_u64(mask, vdupq_n_u64(mod))); 
    }
    
    inline uint64x2_t montgomery_sub_vectorized_neon(uint64x2_t a, uint64x2_t b, u64 mod) {
        uint64x2_t diff = vsubq_u64(a, b); 
        uint64x2_t mask = vcgtq_u64(vdupq_n_u64(0), diff); 
        return vaddq_u64(diff, vandq_u64(mask, vdupq_n_u64(mod))); 
    }

    auto ntt = [&](u64 *arr, bool invert) {
        // 位反转置换
        for (u64 i = 1, j = 0; i < len; ++i) {
            u64 bit = len >> 1;
            for (; j & bit; bit >>= 1) j ^= bit;
            j ^= bit;
            if (i < j) std::swap(arr[i], arr[j]);
        }
    
        for (u64 mid = 1; mid < len; mid <<= 1) {
            u64 wlen = invert ? root_inv_mont : root_mont;
    
        
            for (u64 step = mid << 1; step < len; step <<= 1)
                wlen = montgomery_mul(wlen, wlen, mod, inv);
    
            for (u64 j = 0; j < len; j += (mid << 1)) {
                u64 w = to_mont(1, mod, r2, inv); // 初始化单位根为1
    
                u64 k = 0;
                // 向量化部分：每次处理 2 个元素
                for (; k + 1 < mid; k += 2) {
                    // 加载 arr[j + k] 和 arr[j + k + mid]
                    uint64x2_t u_vec = vld1q_u64(&arr[j + k]);      
                    uint64x2_t v_vec = vld1q_u64(&arr[j + k + mid]); 
    
                    // 计算 v * w
                    uint64x2_t w_vec = vdupq_n_u64(w);
                    v_vec = montgomery_mul_vectorized_neon(v_vec, w_vec, mod, inv); 
    
                    // 计算 arr[j + k] 和 arr[j + k + mid]
                    uint64x2_t add_vec = montgomery_add_vectorized_neon(u_vec, v_vec, mod);   
                    uint64x2_t sub_vec = montgomery_sub_vectorized_neon(u_vec, v_vec, mod);    
    
                    // 存储结果
                    vst1q_u64(&arr[j + k], add_vec);
                    vst1q_u64(&arr[j + k + mid], sub_vec);
    
                    // 更新单位根 w
                    uint64x2_t wlen_vec = vdupq_n_u64(wlen); 
                    w_vec = montgomery_mul_vectorized_neon(w_vec, wlen_vec, mod, inv); 
                }
    
                // 处理剩余的元素
                for (; k < mid; ++k) {
                    u64 u = arr[j + k];
                    u64 v = montgomery_mul(arr[j + k + mid], w, mod, inv);
    
                    arr[j + k] = montgomery_add(u, v, mod);
                    arr[j + k + mid] = montgomery_sub(u, v, mod);
                    w = montgomery_mul(w, wlen, mod, inv);
                }
            }
        }
    
        if (invert) {
            for (u64 i = 0; i < len; ++i) {
                arr[i] = montgomery_mul(arr[i], len_inv_mont, mod, inv);
            }
        }
    };
    
    
    ntt(A, false);
    ntt(B, false);
    for (u64 i = 0; i < len; ++i)
        A[i] = montgomery_mul(A[i], B[i], mod, inv);
    ntt(A, true);

    for (int i = 0; i < 2 * n - 1; ++i)
        ab[i] = from_mont(A[i], mod, inv);

    delete[] A;
    delete[] B;
}


int a[300000], b[300000], ab[300000];
int main(int argc, char *argv[])
{

    // 保证输入的所有模数的原根均为 3, 且模数都能表示为 a \times 4 ^ k + 1 的形式
    // 输入模数分别为 7340033 104857601 469762049 263882790666241
    // 第四个模数超过了整型表示范围, 如果实现此模数意义下的多项式乘法需要修改框架
    // 对第四个模数的输入数据不做必要要求, 如果要自行探索大模数 NTT, 请在完成前三个模数的基础代码及优化后实现大模数 NTT
    // 输入文件共五个, 第一个输入文件 n = 4, 其余四个文件分别对应四个模数, n = 131072
    // 在实现快速数论变化前, 后四个测试样例运行时间较久, 推荐调试正确性时只使用输入文件 1
    int test_begin = 0;
    int test_end = 4;
    for(int i = test_begin; i <= test_end; ++i){
        long double ans = 0;
        int n_, p_;
        fRead(a, b, &n_, &p_, i);
        memset(ab, 0, sizeof(ab));
        auto Start = std::chrono::high_resolution_clock::now();
        // TODO : 将 poly_multiply 函数替换成你写的 ntt
        poly_multiply(a, b, ab, n_, p_);
        auto End = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double,std::ratio<1,1000>>elapsed = End - Start;
        ans += elapsed.count();
        fCheck(ab, n_, i);
        std::cout<<"average latency for n = "<<n_<<" p = "<<p_<<" : "<<ans<<" (us) "<<std::endl;
        // 可以使用 fWrite 函数将 ab 的输出结果打印到 files 文件夹下
        // 禁止使用 cout 一次性输出大量文件内容
        fWrite(ab, n_, i);
    }
    return 0;
}
